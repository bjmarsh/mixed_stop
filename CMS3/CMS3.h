// -*- C++ -*-
#ifndef CMS3_H
#define CMS3_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class CMS3 {
private: 
protected: 
	unsigned int index;
	unsigned int	run_;
	TBranch *run_branch;
	bool run_isLoaded;
	unsigned int	ls_;
	TBranch *ls_branch;
	bool ls_isLoaded;
	unsigned int	evt_;
	TBranch *evt_branch;
	bool evt_isLoaded;
	int	nvtxs_;
	TBranch *nvtxs_branch;
	bool nvtxs_isLoaded;
	int	firstGoodVtxIdx_;
	TBranch *firstGoodVtxIdx_branch;
	bool firstGoodVtxIdx_isLoaded;
	int	firstVtx_isfake_;
	TBranch *firstVtx_isfake_branch;
	bool firstVtx_isfake_isLoaded;
	float	firstVtx_ndof_;
	TBranch *firstVtx_ndof_branch;
	bool firstVtx_ndof_isLoaded;
	float	firstVtx_posRho_;
	TBranch *firstVtx_posRho_branch;
	bool firstVtx_posRho_isLoaded;
	float	firstVtx_posZ_;
	TBranch *firstVtx_posZ_branch;
	bool firstVtx_posZ_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *firstVtx_posp4_;
	TBranch *firstVtx_posp4_branch;
	bool firstVtx_posp4_isLoaded;
	int	pu_nvtxs_;
	TBranch *pu_nvtxs_branch;
	bool pu_nvtxs_isLoaded;
	float	pfmet_;
	TBranch *pfmet_branch;
	bool pfmet_isLoaded;
	float	pfmet_phi_;
	TBranch *pfmet_phi_branch;
	bool pfmet_phi_isLoaded;
	float	scale1fb_;
	TBranch *scale1fb_branch;
	bool scale1fb_isLoaded;
	float	xsec_;
	TBranch *xsec_branch;
	bool xsec_isLoaded;
	float	kfactor_;
	TBranch *kfactor_branch;
	bool kfactor_isLoaded;
	float	pu_ntrue_;
	TBranch *pu_ntrue_branch;
	bool pu_ntrue_isLoaded;
	int	ngoodleps_;
	TBranch *ngoodleps_branch;
	bool ngoodleps_isLoaded;
	int	nvetoleps_;
	TBranch *nvetoleps_branch;
	bool nvetoleps_isLoaded;
	bool	is_data_;
	TBranch *is_data_branch;
	bool is_data_isLoaded;
	string *dataset_;
	TBranch *dataset_branch;
	bool dataset_isLoaded;
	string *filename_;
	TBranch *filename_branch;
	bool filename_isLoaded;
	string *cms3tag_;
	TBranch *cms3tag_branch;
	bool cms3tag_isLoaded;
	unsigned int	nEvents_;
	TBranch *nEvents_branch;
	bool nEvents_isLoaded;
	unsigned int	nEvents_goodvtx_;
	TBranch *nEvents_goodvtx_branch;
	bool nEvents_goodvtx_isLoaded;
	unsigned int	nEvents_MET30_;
	TBranch *nEvents_MET30_branch;
	bool nEvents_MET30_isLoaded;
	unsigned int	nEvents_1goodlep_;
	TBranch *nEvents_1goodlep_branch;
	bool nEvents_1goodlep_isLoaded;
	unsigned int	nEvents_2goodjets_;
	TBranch *nEvents_2goodjets_branch;
	bool nEvents_2goodjets_isLoaded;
	int	genlepsfromtop_;
	TBranch *genlepsfromtop_branch;
	bool genlepsfromtop_isLoaded;
	float	MT2W_;
	TBranch *MT2W_branch;
	bool MT2W_isLoaded;
	float	MT2W_lep2_;
	TBranch *MT2W_lep2_branch;
	bool MT2W_lep2_isLoaded;
	float	mindphi_met_j1_j2_;
	TBranch *mindphi_met_j1_j2_branch;
	bool mindphi_met_j1_j2_isLoaded;
	float	mt_met_lep_;
	TBranch *mt_met_lep_branch;
	bool mt_met_lep_isLoaded;
	float	mt_met_lep2_;
	TBranch *mt_met_lep2_branch;
	bool mt_met_lep2_isLoaded;
	float	dR_lep_leadb_;
	TBranch *dR_lep_leadb_branch;
	bool dR_lep_leadb_isLoaded;
	float	dR_lep2_leadb_;
	TBranch *dR_lep2_leadb_branch;
	bool dR_lep2_leadb_isLoaded;
	float	hadronic_top_chi2_;
	TBranch *hadronic_top_chi2_branch;
	bool hadronic_top_chi2_isLoaded;
	float	dphi_Wlep_;
	TBranch *dphi_Wlep_branch;
	bool dphi_Wlep_isLoaded;
	float	MET_over_sqrtHT_;
	TBranch *MET_over_sqrtHT_branch;
	bool MET_over_sqrtHT_isLoaded;
	float	ak4pfjets_rho_;
	TBranch *ak4pfjets_rho_branch;
	bool ak4pfjets_rho_isLoaded;
	vector<string> *sparms_comment_;
	TBranch *sparms_comment_branch;
	bool sparms_comment_isLoaded;
	vector<string> *sparms_names_;
	TBranch *sparms_names_branch;
	bool sparms_names_isLoaded;
	float	sparms_filterEfficiency_;
	TBranch *sparms_filterEfficiency_branch;
	bool sparms_filterEfficiency_isLoaded;
	float	sparms_pdfScale_;
	TBranch *sparms_pdfScale_branch;
	bool sparms_pdfScale_isLoaded;
	float	sparms_pdfWeight1_;
	TBranch *sparms_pdfWeight1_branch;
	bool sparms_pdfWeight1_isLoaded;
	float	sparms_pdfWeight2_;
	TBranch *sparms_pdfWeight2_branch;
	bool sparms_pdfWeight2_isLoaded;
	float	sparms_weight_;
	TBranch *sparms_weight_branch;
	bool sparms_weight_isLoaded;
	float	sparms_xsec_;
	TBranch *sparms_xsec_branch;
	bool sparms_xsec_isLoaded;
	vector<float> *sparms_values_;
	TBranch *sparms_values_branch;
	bool sparms_values_isLoaded;
	int	sparms_subProcessId_;
	TBranch *sparms_subProcessId_branch;
	bool sparms_subProcessId_isLoaded;
	float	mass_lsp_;
	TBranch *mass_lsp_branch;
	bool mass_lsp_isLoaded;
	float	mass_chargino_;
	TBranch *mass_chargino_branch;
	bool mass_chargino_isLoaded;
	float	mass_stop_;
	TBranch *mass_stop_branch;
	bool mass_stop_isLoaded;
	float	genmet_;
	TBranch *genmet_branch;
	bool genmet_isLoaded;
	float	genmet_phi_;
	TBranch *genmet_phi_branch;
	bool genmet_phi_isLoaded;
	bool	PassTrackVeto_;
	TBranch *PassTrackVeto_branch;
	bool PassTrackVeto_isLoaded;
	bool	PassTauVeto_;
	TBranch *PassTauVeto_branch;
	bool PassTauVeto_isLoaded;
	float	EA_all_rho_;
	TBranch *EA_all_rho_branch;
	bool EA_all_rho_isLoaded;
	float	EA_allcalo_rho_;
	TBranch *EA_allcalo_rho_branch;
	bool EA_allcalo_rho_isLoaded;
	float	EA_centralcalo_rho_;
	TBranch *EA_centralcalo_rho_branch;
	bool EA_centralcalo_rho_isLoaded;
	float	EA_centralchargedpileup_rho_;
	TBranch *EA_centralchargedpileup_rho_branch;
	bool EA_centralchargedpileup_rho_isLoaded;
	float	EA_centralneutral_rho_;
	TBranch *EA_centralneutral_rho_branch;
	bool EA_centralneutral_rho_isLoaded;
	float	topness_;
	TBranch *topness_branch;
	bool topness_isLoaded;
	float	topness_lep2_;
	TBranch *topness_lep2_branch;
	bool topness_lep2_isLoaded;
	float	topnessMod_;
	TBranch *topnessMod_branch;
	bool topnessMod_isLoaded;
	float	topnessMod_lep2_;
	TBranch *topnessMod_lep2_branch;
	bool topnessMod_lep2_isLoaded;
	float	MT2_lb_b_;
	TBranch *MT2_lb_b_branch;
	bool MT2_lb_b_isLoaded;
	float	MT2_lb_b_lep2_;
	TBranch *MT2_lb_b_lep2_branch;
	bool MT2_lb_b_lep2_isLoaded;
	float	MT2_lb_b_mass_;
	TBranch *MT2_lb_b_mass_branch;
	bool MT2_lb_b_mass_isLoaded;
	float	MT2_lb_b_mass_lep2_;
	TBranch *MT2_lb_b_mass_lep2_branch;
	bool MT2_lb_b_mass_lep2_isLoaded;
	float	MT2_lb_bqq_;
	TBranch *MT2_lb_bqq_branch;
	bool MT2_lb_bqq_isLoaded;
	float	MT2_lb_bqq_lep2_;
	TBranch *MT2_lb_bqq_lep2_branch;
	bool MT2_lb_bqq_lep2_isLoaded;
	float	MT2_lb_bqq_mass_;
	TBranch *MT2_lb_bqq_mass_branch;
	bool MT2_lb_bqq_mass_isLoaded;
	float	MT2_lb_bqq_mass_lep2_;
	TBranch *MT2_lb_bqq_mass_lep2_branch;
	bool MT2_lb_bqq_mass_lep2_isLoaded;
	float	Mlb_closestb_;
	TBranch *Mlb_closestb_branch;
	bool Mlb_closestb_isLoaded;
	float	Mlb_lead_bdiscr_;
	TBranch *Mlb_lead_bdiscr_branch;
	bool Mlb_lead_bdiscr_isLoaded;
	float	Mlb_closestb_lep2_;
	TBranch *Mlb_closestb_lep2_branch;
	bool Mlb_closestb_lep2_isLoaded;
	float	Mlb_lead_bdiscr_lep2_;
	TBranch *Mlb_lead_bdiscr_lep2_branch;
	bool Mlb_lead_bdiscr_lep2_isLoaded;
	float	Mjjj_;
	TBranch *Mjjj_branch;
	bool Mjjj_isLoaded;
	float	Mjjj_lep2_;
	TBranch *Mjjj_lep2_branch;
	bool Mjjj_lep2_isLoaded;
	int	HLT_SingleEl_;
	TBranch *HLT_SingleEl_branch;
	bool HLT_SingleEl_isLoaded;
	int	HLT_SingleMu_;
	TBranch *HLT_SingleMu_branch;
	bool HLT_SingleMu_isLoaded;
	int	HLT_MET170_;
	TBranch *HLT_MET170_branch;
	bool HLT_MET170_isLoaded;
	int	HLT_ht350met120_;
	TBranch *HLT_ht350met120_branch;
	bool HLT_ht350met120_isLoaded;
	int	HLT_MET120Btag_;
	TBranch *HLT_MET120Btag_branch;
	bool HLT_MET120Btag_isLoaded;
	int	HLT_MET120Mu5_;
	TBranch *HLT_MET120Mu5_branch;
	bool HLT_MET120Mu5_isLoaded;
	float	pu_weight_;
	TBranch *pu_weight_branch;
	bool pu_weight_isLoaded;
	float	lep_sf_;
	TBranch *lep_sf_branch;
	bool lep_sf_isLoaded;
	float	btag_sf_;
	TBranch *btag_sf_branch;
	bool btag_sf_isLoaded;
	float	HLT_SingleEl_eff_;
	TBranch *HLT_SingleEl_eff_branch;
	bool HLT_SingleEl_eff_isLoaded;
	float	HLT_SingleMu_eff_;
	TBranch *HLT_SingleMu_eff_branch;
	bool HLT_SingleMu_eff_isLoaded;
	bool	lep1_is_mu_;
	TBranch *lep1_is_mu_branch;
	bool lep1_is_mu_isLoaded;
	bool	lep1_is_el_;
	TBranch *lep1_is_el_branch;
	bool lep1_is_el_isLoaded;
	int	lep1_charge_;
	TBranch *lep1_charge_branch;
	bool lep1_charge_isLoaded;
	int	lep1_pdgid_;
	TBranch *lep1_pdgid_branch;
	bool lep1_pdgid_isLoaded;
	int	lep1_type_;
	TBranch *lep1_type_branch;
	bool lep1_type_isLoaded;
	int	lep1_production_type_;
	TBranch *lep1_production_type_branch;
	bool lep1_production_type_isLoaded;
	float	lep1_d0_;
	TBranch *lep1_d0_branch;
	bool lep1_d0_isLoaded;
	float	lep1_d0err_;
	TBranch *lep1_d0err_branch;
	bool lep1_d0err_isLoaded;
	float	lep1_dz_;
	TBranch *lep1_dz_branch;
	bool lep1_dz_isLoaded;
	float	lep1_dzerr_;
	TBranch *lep1_dzerr_branch;
	bool lep1_dzerr_isLoaded;
	float	lep1_sigmaIEtaEta_fill5x5_;
	TBranch *lep1_sigmaIEtaEta_fill5x5_branch;
	bool lep1_sigmaIEtaEta_fill5x5_isLoaded;
	float	lep1_dEtaIn_;
	TBranch *lep1_dEtaIn_branch;
	bool lep1_dEtaIn_isLoaded;
	float	lep1_dPhiIn_;
	TBranch *lep1_dPhiIn_branch;
	bool lep1_dPhiIn_isLoaded;
	float	lep1_hOverE_;
	TBranch *lep1_hOverE_branch;
	bool lep1_hOverE_isLoaded;
	float	lep1_ooEmooP_;
	TBranch *lep1_ooEmooP_branch;
	bool lep1_ooEmooP_isLoaded;
	int	lep1_expectedMissingInnerHits_;
	TBranch *lep1_expectedMissingInnerHits_branch;
	bool lep1_expectedMissingInnerHits_isLoaded;
	bool	lep1_conversionVeto_;
	TBranch *lep1_conversionVeto_branch;
	bool lep1_conversionVeto_isLoaded;
	float	lep1_etaSC_;
	TBranch *lep1_etaSC_branch;
	bool lep1_etaSC_isLoaded;
	float	lep1_ChiSqr_;
	TBranch *lep1_ChiSqr_branch;
	bool lep1_ChiSqr_isLoaded;
	float	lep1_chiso_;
	TBranch *lep1_chiso_branch;
	bool lep1_chiso_isLoaded;
	float	lep1_nhiso_;
	TBranch *lep1_nhiso_branch;
	bool lep1_nhiso_isLoaded;
	float	lep1_emiso_;
	TBranch *lep1_emiso_branch;
	bool lep1_emiso_isLoaded;
	float	lep1_deltaBeta_;
	TBranch *lep1_deltaBeta_branch;
	bool lep1_deltaBeta_isLoaded;
	float	lep1_relIso03DB_;
	TBranch *lep1_relIso03DB_branch;
	bool lep1_relIso03DB_isLoaded;
	float	lep1_relIso03EA_;
	TBranch *lep1_relIso03EA_branch;
	bool lep1_relIso03EA_isLoaded;
	float	lep1_relIso04DB_;
	TBranch *lep1_relIso04DB_branch;
	bool lep1_relIso04DB_isLoaded;
	float	lep1_miniRelIsoDB_;
	TBranch *lep1_miniRelIsoDB_branch;
	bool lep1_miniRelIsoDB_isLoaded;
	float	lep1_miniRelIsoEA_;
	TBranch *lep1_miniRelIsoEA_branch;
	bool lep1_miniRelIsoEA_isLoaded;
	float	lep1_MiniIso_;
	TBranch *lep1_MiniIso_branch;
	bool lep1_MiniIso_isLoaded;
	int	lep1_mcid_;
	TBranch *lep1_mcid_branch;
	bool lep1_mcid_isLoaded;
	int	lep1_mcstatus_;
	TBranch *lep1_mcstatus_branch;
	bool lep1_mcstatus_isLoaded;
	int	lep1_mc3dr_;
	TBranch *lep1_mc3dr_branch;
	bool lep1_mc3dr_isLoaded;
	int	lep1_mc3id_;
	TBranch *lep1_mc3id_branch;
	bool lep1_mc3id_isLoaded;
	int	lep1_mc3idx_;
	TBranch *lep1_mc3idx_branch;
	bool lep1_mc3idx_isLoaded;
	int	lep1_mc3motherid_;
	TBranch *lep1_mc3motherid_branch;
	bool lep1_mc3motherid_isLoaded;
	int	lep1_mc3motheridx_;
	TBranch *lep1_mc3motheridx_branch;
	bool lep1_mc3motheridx_isLoaded;
	bool	lep1_is_eleid_loose_;
	TBranch *lep1_is_eleid_loose_branch;
	bool lep1_is_eleid_loose_isLoaded;
	bool	lep1_is_eleid_medium_;
	TBranch *lep1_is_eleid_medium_branch;
	bool lep1_is_eleid_medium_isLoaded;
	bool	lep1_is_eleid_tight_;
	TBranch *lep1_is_eleid_tight_branch;
	bool lep1_is_eleid_tight_isLoaded;
	bool	lep1_is_phys14_loose_noIso_;
	TBranch *lep1_is_phys14_loose_noIso_branch;
	bool lep1_is_phys14_loose_noIso_isLoaded;
	bool	lep1_is_phys14_medium_noIso_;
	TBranch *lep1_is_phys14_medium_noIso_branch;
	bool lep1_is_phys14_medium_noIso_isLoaded;
	bool	lep1_is_phys14_tight_noIso_;
	TBranch *lep1_is_phys14_tight_noIso_branch;
	bool lep1_is_phys14_tight_noIso_isLoaded;
	float	lep1_eoverpin_;
	TBranch *lep1_eoverpin_branch;
	bool lep1_eoverpin_isLoaded;
	bool	lep1_is_muoid_loose_;
	TBranch *lep1_is_muoid_loose_branch;
	bool lep1_is_muoid_loose_isLoaded;
	bool	lep1_is_muoid_medium_;
	TBranch *lep1_is_muoid_medium_branch;
	bool lep1_is_muoid_medium_isLoaded;
	bool	lep1_is_muoid_tight_;
	TBranch *lep1_is_muoid_tight_branch;
	bool lep1_is_muoid_tight_isLoaded;
	float	lep1_ip3d_;
	TBranch *lep1_ip3d_branch;
	bool lep1_ip3d_isLoaded;
	float	lep1_ip3derr_;
	TBranch *lep1_ip3derr_branch;
	bool lep1_ip3derr_isLoaded;
	bool	lep1_is_pfmu_;
	TBranch *lep1_is_pfmu_branch;
	bool lep1_is_pfmu_isLoaded;
	bool	lep1_passMediumID_;
	TBranch *lep1_passMediumID_branch;
	bool lep1_passMediumID_isLoaded;
	bool	lep1_passVeto_;
	TBranch *lep1_passVeto_branch;
	bool lep1_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_;
	TBranch *lep1_p4_branch;
	bool lep1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_mcp4_;
	TBranch *lep1_mcp4_branch;
	bool lep1_mcp4_isLoaded;
	float	lep1_pt_;
	TBranch *lep1_pt_branch;
	bool lep1_pt_isLoaded;
	float	lep1_eta_;
	TBranch *lep1_eta_branch;
	bool lep1_eta_isLoaded;
	float	lep1_phi_;
	TBranch *lep1_phi_branch;
	bool lep1_phi_isLoaded;
	float	lep1_mass_;
	TBranch *lep1_mass_branch;
	bool lep1_mass_isLoaded;
	bool	lep2_is_mu_;
	TBranch *lep2_is_mu_branch;
	bool lep2_is_mu_isLoaded;
	bool	lep2_is_el_;
	TBranch *lep2_is_el_branch;
	bool lep2_is_el_isLoaded;
	int	lep2_charge_;
	TBranch *lep2_charge_branch;
	bool lep2_charge_isLoaded;
	int	lep2_pdgid_;
	TBranch *lep2_pdgid_branch;
	bool lep2_pdgid_isLoaded;
	int	lep2_type_;
	TBranch *lep2_type_branch;
	bool lep2_type_isLoaded;
	int	lep2_production_type_;
	TBranch *lep2_production_type_branch;
	bool lep2_production_type_isLoaded;
	float	lep2_d0_;
	TBranch *lep2_d0_branch;
	bool lep2_d0_isLoaded;
	float	lep2_d0err_;
	TBranch *lep2_d0err_branch;
	bool lep2_d0err_isLoaded;
	float	lep2_dz_;
	TBranch *lep2_dz_branch;
	bool lep2_dz_isLoaded;
	float	lep2_dzerr_;
	TBranch *lep2_dzerr_branch;
	bool lep2_dzerr_isLoaded;
	float	lep2_sigmaIEtaEta_fill5x5_;
	TBranch *lep2_sigmaIEtaEta_fill5x5_branch;
	bool lep2_sigmaIEtaEta_fill5x5_isLoaded;
	float	lep2_dEtaIn_;
	TBranch *lep2_dEtaIn_branch;
	bool lep2_dEtaIn_isLoaded;
	float	lep2_dPhiIn_;
	TBranch *lep2_dPhiIn_branch;
	bool lep2_dPhiIn_isLoaded;
	float	lep2_hOverE_;
	TBranch *lep2_hOverE_branch;
	bool lep2_hOverE_isLoaded;
	float	lep2_ooEmooP_;
	TBranch *lep2_ooEmooP_branch;
	bool lep2_ooEmooP_isLoaded;
	int	lep2_expectedMissingInnerHits_;
	TBranch *lep2_expectedMissingInnerHits_branch;
	bool lep2_expectedMissingInnerHits_isLoaded;
	bool	lep2_conversionVeto_;
	TBranch *lep2_conversionVeto_branch;
	bool lep2_conversionVeto_isLoaded;
	float	lep2_etaSC_;
	TBranch *lep2_etaSC_branch;
	bool lep2_etaSC_isLoaded;
	float	lep2_ChiSqr_;
	TBranch *lep2_ChiSqr_branch;
	bool lep2_ChiSqr_isLoaded;
	float	lep2_chiso_;
	TBranch *lep2_chiso_branch;
	bool lep2_chiso_isLoaded;
	float	lep2_nhiso_;
	TBranch *lep2_nhiso_branch;
	bool lep2_nhiso_isLoaded;
	float	lep2_emiso_;
	TBranch *lep2_emiso_branch;
	bool lep2_emiso_isLoaded;
	float	lep2_deltaBeta_;
	TBranch *lep2_deltaBeta_branch;
	bool lep2_deltaBeta_isLoaded;
	float	lep2_relIso03DB_;
	TBranch *lep2_relIso03DB_branch;
	bool lep2_relIso03DB_isLoaded;
	float	lep2_relIso03EA_;
	TBranch *lep2_relIso03EA_branch;
	bool lep2_relIso03EA_isLoaded;
	float	lep2_relIso04DB_;
	TBranch *lep2_relIso04DB_branch;
	bool lep2_relIso04DB_isLoaded;
	float	lep2_miniRelIsoDB_;
	TBranch *lep2_miniRelIsoDB_branch;
	bool lep2_miniRelIsoDB_isLoaded;
	float	lep2_miniRelIsoEA_;
	TBranch *lep2_miniRelIsoEA_branch;
	bool lep2_miniRelIsoEA_isLoaded;
	float	lep2_MiniIso_;
	TBranch *lep2_MiniIso_branch;
	bool lep2_MiniIso_isLoaded;
	int	lep2_mcid_;
	TBranch *lep2_mcid_branch;
	bool lep2_mcid_isLoaded;
	int	lep2_mcstatus_;
	TBranch *lep2_mcstatus_branch;
	bool lep2_mcstatus_isLoaded;
	int	lep2_mc3dr_;
	TBranch *lep2_mc3dr_branch;
	bool lep2_mc3dr_isLoaded;
	int	lep2_mc3id_;
	TBranch *lep2_mc3id_branch;
	bool lep2_mc3id_isLoaded;
	int	lep2_mc3idx_;
	TBranch *lep2_mc3idx_branch;
	bool lep2_mc3idx_isLoaded;
	int	lep2_mc3motherid_;
	TBranch *lep2_mc3motherid_branch;
	bool lep2_mc3motherid_isLoaded;
	int	lep2_mc3motheridx_;
	TBranch *lep2_mc3motheridx_branch;
	bool lep2_mc3motheridx_isLoaded;
	bool	lep2_is_eleid_loose_;
	TBranch *lep2_is_eleid_loose_branch;
	bool lep2_is_eleid_loose_isLoaded;
	bool	lep2_is_eleid_medium_;
	TBranch *lep2_is_eleid_medium_branch;
	bool lep2_is_eleid_medium_isLoaded;
	bool	lep2_is_eleid_tight_;
	TBranch *lep2_is_eleid_tight_branch;
	bool lep2_is_eleid_tight_isLoaded;
	bool	lep2_is_phys14_loose_noIso_;
	TBranch *lep2_is_phys14_loose_noIso_branch;
	bool lep2_is_phys14_loose_noIso_isLoaded;
	bool	lep2_is_phys14_medium_noIso_;
	TBranch *lep2_is_phys14_medium_noIso_branch;
	bool lep2_is_phys14_medium_noIso_isLoaded;
	bool	lep2_is_phys14_tight_noIso_;
	TBranch *lep2_is_phys14_tight_noIso_branch;
	bool lep2_is_phys14_tight_noIso_isLoaded;
	float	lep2_eoverpin_;
	TBranch *lep2_eoverpin_branch;
	bool lep2_eoverpin_isLoaded;
	bool	lep2_is_muoid_loose_;
	TBranch *lep2_is_muoid_loose_branch;
	bool lep2_is_muoid_loose_isLoaded;
	bool	lep2_is_muoid_medium_;
	TBranch *lep2_is_muoid_medium_branch;
	bool lep2_is_muoid_medium_isLoaded;
	bool	lep2_is_muoid_tight_;
	TBranch *lep2_is_muoid_tight_branch;
	bool lep2_is_muoid_tight_isLoaded;
	float	lep2_ip3d_;
	TBranch *lep2_ip3d_branch;
	bool lep2_ip3d_isLoaded;
	float	lep2_ip3derr_;
	TBranch *lep2_ip3derr_branch;
	bool lep2_ip3derr_isLoaded;
	bool	lep2_is_pfmu_;
	TBranch *lep2_is_pfmu_branch;
	bool lep2_is_pfmu_isLoaded;
	bool	lep2_passMediumID_;
	TBranch *lep2_passMediumID_branch;
	bool lep2_passMediumID_isLoaded;
	bool	lep2_passVeto_;
	TBranch *lep2_passVeto_branch;
	bool lep2_passVeto_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_;
	TBranch *lep2_p4_branch;
	bool lep2_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_mcp4_;
	TBranch *lep2_mcp4_branch;
	bool lep2_mcp4_isLoaded;
	float	lep2_pt_;
	TBranch *lep2_pt_branch;
	bool lep2_pt_isLoaded;
	float	lep2_eta_;
	TBranch *lep2_eta_branch;
	bool lep2_eta_isLoaded;
	float	lep2_phi_;
	TBranch *lep2_phi_branch;
	bool lep2_phi_isLoaded;
	float	lep2_mass_;
	TBranch *lep2_mass_branch;
	bool lep2_mass_isLoaded;
	int	nGoodGenJets_;
	TBranch *nGoodGenJets_branch;
	bool nGoodGenJets_isLoaded;
	int	ngoodjets_;
	TBranch *ngoodjets_branch;
	bool ngoodjets_isLoaded;
	int	nfailjets_;
	TBranch *nfailjets_branch;
	bool nfailjets_isLoaded;
	int	ak8GoodPFJets_;
	TBranch *ak8GoodPFJets_branch;
	bool ak8GoodPFJets_isLoaded;
	int	ngoodbtags_;
	TBranch *ngoodbtags_branch;
	bool ngoodbtags_isLoaded;
	float	ak4_HT_;
	TBranch *ak4_HT_branch;
	bool ak4_HT_isLoaded;
	float	ak4_htssm_;
	TBranch *ak4_htssm_branch;
	bool ak4_htssm_isLoaded;
	float	ak4_htosm_;
	TBranch *ak4_htosm_branch;
	bool ak4_htosm_isLoaded;
	float	ak4_htratiom_;
	TBranch *ak4_htratiom_branch;
	bool ak4_htratiom_isLoaded;
	vector<float> *dphi_ak4pfjet_met_;
	TBranch *dphi_ak4pfjet_met_branch;
	bool dphi_ak4pfjet_met_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4pfjets_p4_;
	TBranch *ak4pfjets_p4_branch;
	bool ak4pfjets_p4_isLoaded;
	vector<float> *ak4pfjets_pt_;
	TBranch *ak4pfjets_pt_branch;
	bool ak4pfjets_pt_isLoaded;
	vector<float> *ak4pfjets_eta_;
	TBranch *ak4pfjets_eta_branch;
	bool ak4pfjets_eta_isLoaded;
	vector<float> *ak4pfjets_phi_;
	TBranch *ak4pfjets_phi_branch;
	bool ak4pfjets_phi_isLoaded;
	vector<float> *ak4pfjets_mass_;
	TBranch *ak4pfjets_mass_branch;
	bool ak4pfjets_mass_isLoaded;
	vector<bool> *ak4pfjets_passMEDbtag_;
	TBranch *ak4pfjets_passMEDbtag_branch;
	bool ak4pfjets_passMEDbtag_isLoaded;
	vector<float> *ak4pfjets_qg_disc_;
	TBranch *ak4pfjets_qg_disc_branch;
	bool ak4pfjets_qg_disc_isLoaded;
	vector<float> *ak4pfjets_CSV_;
	TBranch *ak4pfjets_CSV_branch;
	bool ak4pfjets_CSV_isLoaded;
	vector<float> *ak4pfjets_puid_;
	TBranch *ak4pfjets_puid_branch;
	bool ak4pfjets_puid_isLoaded;
	vector<int> *ak4pfjets_parton_flavor_;
	TBranch *ak4pfjets_parton_flavor_branch;
	bool ak4pfjets_parton_flavor_isLoaded;
	vector<bool> *ak4pfjets_loose_puid_;
	TBranch *ak4pfjets_loose_puid_branch;
	bool ak4pfjets_loose_puid_isLoaded;
	vector<bool> *ak4pfjets_loose_pfid_;
	TBranch *ak4pfjets_loose_pfid_branch;
	bool ak4pfjets_loose_pfid_isLoaded;
	vector<bool> *ak4pfjets_medium_pfid_;
	TBranch *ak4pfjets_medium_pfid_branch;
	bool ak4pfjets_medium_pfid_isLoaded;
	vector<bool> *ak4pfjets_tight_pfid_;
	TBranch *ak4pfjets_tight_pfid_branch;
	bool ak4pfjets_tight_pfid_isLoaded;
	vector<float> *ak4pfjets_MEDbjet_pt_;
	TBranch *ak4pfjets_MEDbjet_pt_branch;
	bool ak4pfjets_MEDbjet_pt_isLoaded;
	float	ak4pfjets_leadMEDbjet_pt_;
	TBranch *ak4pfjets_leadMEDbjet_pt_branch;
	bool ak4pfjets_leadMEDbjet_pt_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadMEDbjet_p4_;
	TBranch *ak4pfjets_leadMEDbjet_p4_branch;
	bool ak4pfjets_leadMEDbjet_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjets_leadbtag_p4_;
	TBranch *ak4pfjets_leadbtag_p4_branch;
	bool ak4pfjets_leadbtag_p4_isLoaded;
	vector<float> *ak4pfjets_chf_;
	TBranch *ak4pfjets_chf_branch;
	bool ak4pfjets_chf_isLoaded;
	vector<float> *ak4pfjets_nhf_;
	TBranch *ak4pfjets_nhf_branch;
	bool ak4pfjets_nhf_isLoaded;
	vector<float> *ak4pfjets_cef_;
	TBranch *ak4pfjets_cef_branch;
	bool ak4pfjets_cef_isLoaded;
	vector<float> *ak4pfjets_nef_;
	TBranch *ak4pfjets_nef_branch;
	bool ak4pfjets_nef_isLoaded;
	vector<float> *ak4pfjets_muf_;
	TBranch *ak4pfjets_muf_branch;
	bool ak4pfjets_muf_isLoaded;
	vector<int> *ak4pfjets_cm_;
	TBranch *ak4pfjets_cm_branch;
	bool ak4pfjets_cm_isLoaded;
	vector<int> *ak4pfjets_nm_;
	TBranch *ak4pfjets_nm_branch;
	bool ak4pfjets_nm_isLoaded;
	vector<int> *ak4pfjets_mc3dr_;
	TBranch *ak4pfjets_mc3dr_branch;
	bool ak4pfjets_mc3dr_isLoaded;
	vector<int> *ak4pfjets_mc3id_;
	TBranch *ak4pfjets_mc3id_branch;
	bool ak4pfjets_mc3id_isLoaded;
	vector<int> *ak4pfjets_mc3idx_;
	TBranch *ak4pfjets_mc3idx_branch;
	bool ak4pfjets_mc3idx_isLoaded;
	vector<int> *ak4pfjets_mcmotherid_;
	TBranch *ak4pfjets_mcmotherid_branch;
	bool ak4pfjets_mcmotherid_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjet_overlep1_p4_;
	TBranch *ak4pfjet_overlep1_p4_branch;
	bool ak4pfjet_overlep1_p4_isLoaded;
	float	ak4pfjet_overlep1_CSV_;
	TBranch *ak4pfjet_overlep1_CSV_branch;
	bool ak4pfjet_overlep1_CSV_isLoaded;
	float	ak4pfjet_overlep1_pu_id_;
	TBranch *ak4pfjet_overlep1_pu_id_branch;
	bool ak4pfjet_overlep1_pu_id_isLoaded;
	float	ak4pfjet_overlep1_chf_;
	TBranch *ak4pfjet_overlep1_chf_branch;
	bool ak4pfjet_overlep1_chf_isLoaded;
	float	ak4pfjet_overlep1_nhf_;
	TBranch *ak4pfjet_overlep1_nhf_branch;
	bool ak4pfjet_overlep1_nhf_isLoaded;
	float	ak4pfjet_overlep1_cef_;
	TBranch *ak4pfjet_overlep1_cef_branch;
	bool ak4pfjet_overlep1_cef_isLoaded;
	float	ak4pfjet_overlep1_nef_;
	TBranch *ak4pfjet_overlep1_nef_branch;
	bool ak4pfjet_overlep1_nef_isLoaded;
	float	ak4pfjet_overlep1_muf_;
	TBranch *ak4pfjet_overlep1_muf_branch;
	bool ak4pfjet_overlep1_muf_isLoaded;
	int	ak4pfjet_overlep1_cm_;
	TBranch *ak4pfjet_overlep1_cm_branch;
	bool ak4pfjet_overlep1_cm_isLoaded;
	int	ak4pfjet_overlep1_nm_;
	TBranch *ak4pfjet_overlep1_nm_branch;
	bool ak4pfjet_overlep1_nm_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *ak4pfjet_overlep2_p4_;
	TBranch *ak4pfjet_overlep2_p4_branch;
	bool ak4pfjet_overlep2_p4_isLoaded;
	float	ak4pfjet_overlep2_CSV_;
	TBranch *ak4pfjet_overlep2_CSV_branch;
	bool ak4pfjet_overlep2_CSV_isLoaded;
	float	ak4pfjet_overlep2_pu_id_;
	TBranch *ak4pfjet_overlep2_pu_id_branch;
	bool ak4pfjet_overlep2_pu_id_isLoaded;
	float	ak4pfjet_overlep2_chf_;
	TBranch *ak4pfjet_overlep2_chf_branch;
	bool ak4pfjet_overlep2_chf_isLoaded;
	float	ak4pfjet_overlep2_nhf_;
	TBranch *ak4pfjet_overlep2_nhf_branch;
	bool ak4pfjet_overlep2_nhf_isLoaded;
	float	ak4pfjet_overlep2_cef_;
	TBranch *ak4pfjet_overlep2_cef_branch;
	bool ak4pfjet_overlep2_cef_isLoaded;
	float	ak4pfjet_overlep2_nef_;
	TBranch *ak4pfjet_overlep2_nef_branch;
	bool ak4pfjet_overlep2_nef_isLoaded;
	float	ak4pfjet_overlep2_muf_;
	TBranch *ak4pfjet_overlep2_muf_branch;
	bool ak4pfjet_overlep2_muf_isLoaded;
	int	ak4pfjet_overlep2_cm_;
	TBranch *ak4pfjet_overlep2_cm_branch;
	bool ak4pfjet_overlep2_cm_isLoaded;
	int	ak4pfjet_overlep2_nm_;
	TBranch *ak4pfjet_overlep2_nm_branch;
	bool ak4pfjet_overlep2_nm_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak8pfjets_p4_;
	TBranch *ak8pfjets_p4_branch;
	bool ak8pfjets_p4_isLoaded;
	vector<float> *ak8pfjets_tau1_;
	TBranch *ak8pfjets_tau1_branch;
	bool ak8pfjets_tau1_isLoaded;
	vector<float> *ak8pfjets_tau2_;
	TBranch *ak8pfjets_tau2_branch;
	bool ak8pfjets_tau2_isLoaded;
	vector<float> *ak8pfjets_tau3_;
	TBranch *ak8pfjets_tau3_branch;
	bool ak8pfjets_tau3_isLoaded;
	vector<float> *ak8pfjets_top_mass_;
	TBranch *ak8pfjets_top_mass_branch;
	bool ak8pfjets_top_mass_isLoaded;
	vector<float> *ak8pfjets_pruned_mass_;
	TBranch *ak8pfjets_pruned_mass_branch;
	bool ak8pfjets_pruned_mass_isLoaded;
	vector<float> *ak8pfjets_trimmed_mass_;
	TBranch *ak8pfjets_trimmed_mass_branch;
	bool ak8pfjets_trimmed_mass_isLoaded;
	vector<float> *ak8pfjets_filtered_mass_;
	TBranch *ak8pfjets_filtered_mass_branch;
	bool ak8pfjets_filtered_mass_isLoaded;
	vector<float> *ak8pfjets_pu_id_;
	TBranch *ak8pfjets_pu_id_branch;
	bool ak8pfjets_pu_id_isLoaded;
	vector<int> *ak8pfjets_parton_flavor_;
	TBranch *ak8pfjets_parton_flavor_branch;
	bool ak8pfjets_parton_flavor_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak4genjets_p4_;
	TBranch *ak4genjets_p4_branch;
	bool ak4genjets_p4_isLoaded;
	vector<bool> *genels_isfromt_;
	TBranch *genels_isfromt_branch;
	bool genels_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genels_p4_;
	TBranch *genels_p4_branch;
	bool genels_p4_isLoaded;
	vector<float> *genels_charge_;
	TBranch *genels_charge_branch;
	bool genels_charge_isLoaded;
	vector<float> *genels_iso_;
	TBranch *genels_iso_branch;
	bool genels_iso_isLoaded;
	vector<float> *genels_mass_;
	TBranch *genels_mass_branch;
	bool genels_mass_isLoaded;
	vector<int> *genels_id_;
	TBranch *genels_id_branch;
	bool genels_id_isLoaded;
	vector<int> *genels__genpsidx_;
	TBranch *genels__genpsidx_branch;
	bool genels__genpsidx_isLoaded;
	vector<int> *genels_status_;
	TBranch *genels_status_branch;
	bool genels_status_isLoaded;
	vector<vector<int> > *genels_lepdaughter_id_;
	TBranch *genels_lepdaughter_id_branch;
	bool genels_lepdaughter_id_isLoaded;
	vector<int> *genels_gentaudecay_;
	TBranch *genels_gentaudecay_branch;
	bool genels_gentaudecay_isLoaded;
	int	gen_nfromtels__;
	TBranch *gen_nfromtels__branch;
	bool gen_nfromtels__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genels_motherp4_;
	TBranch *genels_motherp4_branch;
	bool genels_motherp4_isLoaded;
	vector<float> *genels_mothercharge_;
	TBranch *genels_mothercharge_branch;
	bool genels_mothercharge_isLoaded;
	vector<int> *genels_motherid_;
	TBranch *genels_motherid_branch;
	bool genels_motherid_isLoaded;
	vector<int> *genels_motheridx_;
	TBranch *genels_motheridx_branch;
	bool genels_motheridx_isLoaded;
	vector<int> *genels_motherstatus_;
	TBranch *genels_motherstatus_branch;
	bool genels_motherstatus_isLoaded;
	vector<bool> *genmus_isfromt_;
	TBranch *genmus_isfromt_branch;
	bool genmus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genmus_p4_;
	TBranch *genmus_p4_branch;
	bool genmus_p4_isLoaded;
	vector<float> *genmus_charge_;
	TBranch *genmus_charge_branch;
	bool genmus_charge_isLoaded;
	vector<float> *genmus_iso_;
	TBranch *genmus_iso_branch;
	bool genmus_iso_isLoaded;
	vector<float> *genmus_mass_;
	TBranch *genmus_mass_branch;
	bool genmus_mass_isLoaded;
	vector<int> *genmus_id_;
	TBranch *genmus_id_branch;
	bool genmus_id_isLoaded;
	vector<int> *genmus__genpsidx_;
	TBranch *genmus__genpsidx_branch;
	bool genmus__genpsidx_isLoaded;
	vector<int> *genmus_status_;
	TBranch *genmus_status_branch;
	bool genmus_status_isLoaded;
	vector<vector<int> > *genmus_lepdaughter_id_;
	TBranch *genmus_lepdaughter_id_branch;
	bool genmus_lepdaughter_id_isLoaded;
	vector<int> *genmus_gentaudecay_;
	TBranch *genmus_gentaudecay_branch;
	bool genmus_gentaudecay_isLoaded;
	int	gen_nfromtmus__;
	TBranch *gen_nfromtmus__branch;
	bool gen_nfromtmus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genmus_motherp4_;
	TBranch *genmus_motherp4_branch;
	bool genmus_motherp4_isLoaded;
	vector<float> *genmus_mothercharge_;
	TBranch *genmus_mothercharge_branch;
	bool genmus_mothercharge_isLoaded;
	vector<int> *genmus_motherid_;
	TBranch *genmus_motherid_branch;
	bool genmus_motherid_isLoaded;
	vector<int> *genmus_motheridx_;
	TBranch *genmus_motheridx_branch;
	bool genmus_motheridx_isLoaded;
	vector<int> *genmus_motherstatus_;
	TBranch *genmus_motherstatus_branch;
	bool genmus_motherstatus_isLoaded;
	vector<bool> *genleptau_els_isfromt_;
	TBranch *genleptau_els_isfromt_branch;
	bool genleptau_els_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleptau_els_p4_;
	TBranch *genleptau_els_p4_branch;
	bool genleptau_els_p4_isLoaded;
	vector<float> *genleptau_els_charge_;
	TBranch *genleptau_els_charge_branch;
	bool genleptau_els_charge_isLoaded;
	vector<float> *genleptau_els_iso_;
	TBranch *genleptau_els_iso_branch;
	bool genleptau_els_iso_isLoaded;
	vector<float> *genleptau_els_mass_;
	TBranch *genleptau_els_mass_branch;
	bool genleptau_els_mass_isLoaded;
	vector<int> *genleptau_els_id_;
	TBranch *genleptau_els_id_branch;
	bool genleptau_els_id_isLoaded;
	vector<int> *genleptau_els__genpsidx_;
	TBranch *genleptau_els__genpsidx_branch;
	bool genleptau_els__genpsidx_isLoaded;
	vector<int> *genleptau_els_status_;
	TBranch *genleptau_els_status_branch;
	bool genleptau_els_status_isLoaded;
	vector<vector<int> > *genleptau_els_lepdaughter_id_;
	TBranch *genleptau_els_lepdaughter_id_branch;
	bool genleptau_els_lepdaughter_id_isLoaded;
	vector<int> *genleptau_els_gentaudecay_;
	TBranch *genleptau_els_gentaudecay_branch;
	bool genleptau_els_gentaudecay_isLoaded;
	int	gen_nfromtleptau_els__;
	TBranch *gen_nfromtleptau_els__branch;
	bool gen_nfromtleptau_els__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleptau_els_motherp4_;
	TBranch *genleptau_els_motherp4_branch;
	bool genleptau_els_motherp4_isLoaded;
	vector<float> *genleptau_els_mothercharge_;
	TBranch *genleptau_els_mothercharge_branch;
	bool genleptau_els_mothercharge_isLoaded;
	vector<int> *genleptau_els_motherid_;
	TBranch *genleptau_els_motherid_branch;
	bool genleptau_els_motherid_isLoaded;
	vector<int> *genleptau_els_motheridx_;
	TBranch *genleptau_els_motheridx_branch;
	bool genleptau_els_motheridx_isLoaded;
	vector<int> *genleptau_els_motherstatus_;
	TBranch *genleptau_els_motherstatus_branch;
	bool genleptau_els_motherstatus_isLoaded;
	vector<bool> *genleptau_mus_isfromt_;
	TBranch *genleptau_mus_isfromt_branch;
	bool genleptau_mus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleptau_mus_p4_;
	TBranch *genleptau_mus_p4_branch;
	bool genleptau_mus_p4_isLoaded;
	vector<float> *genleptau_mus_charge_;
	TBranch *genleptau_mus_charge_branch;
	bool genleptau_mus_charge_isLoaded;
	vector<float> *genleptau_mus_iso_;
	TBranch *genleptau_mus_iso_branch;
	bool genleptau_mus_iso_isLoaded;
	vector<float> *genleptau_mus_mass_;
	TBranch *genleptau_mus_mass_branch;
	bool genleptau_mus_mass_isLoaded;
	vector<int> *genleptau_mus_id_;
	TBranch *genleptau_mus_id_branch;
	bool genleptau_mus_id_isLoaded;
	vector<int> *genleptau_mus__genpsidx_;
	TBranch *genleptau_mus__genpsidx_branch;
	bool genleptau_mus__genpsidx_isLoaded;
	vector<int> *genleptau_mus_status_;
	TBranch *genleptau_mus_status_branch;
	bool genleptau_mus_status_isLoaded;
	vector<vector<int> > *genleptau_mus_lepdaughter_id_;
	TBranch *genleptau_mus_lepdaughter_id_branch;
	bool genleptau_mus_lepdaughter_id_isLoaded;
	vector<int> *genleptau_mus_gentaudecay_;
	TBranch *genleptau_mus_gentaudecay_branch;
	bool genleptau_mus_gentaudecay_isLoaded;
	int	gen_nfromtleptau_mus__;
	TBranch *gen_nfromtleptau_mus__branch;
	bool gen_nfromtleptau_mus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genleptau_mus_motherp4_;
	TBranch *genleptau_mus_motherp4_branch;
	bool genleptau_mus_motherp4_isLoaded;
	vector<float> *genleptau_mus_mothercharge_;
	TBranch *genleptau_mus_mothercharge_branch;
	bool genleptau_mus_mothercharge_isLoaded;
	vector<int> *genleptau_mus_motherid_;
	TBranch *genleptau_mus_motherid_branch;
	bool genleptau_mus_motherid_isLoaded;
	vector<int> *genleptau_mus_motheridx_;
	TBranch *genleptau_mus_motheridx_branch;
	bool genleptau_mus_motheridx_isLoaded;
	vector<int> *genleptau_mus_motherstatus_;
	TBranch *genleptau_mus_motherstatus_branch;
	bool genleptau_mus_motherstatus_isLoaded;
	vector<bool> *gentaus_isfromt_;
	TBranch *gentaus_isfromt_branch;
	bool gentaus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gentaus_p4_;
	TBranch *gentaus_p4_branch;
	bool gentaus_p4_isLoaded;
	vector<float> *gentaus_charge_;
	TBranch *gentaus_charge_branch;
	bool gentaus_charge_isLoaded;
	vector<float> *gentaus_iso_;
	TBranch *gentaus_iso_branch;
	bool gentaus_iso_isLoaded;
	vector<float> *gentaus_mass_;
	TBranch *gentaus_mass_branch;
	bool gentaus_mass_isLoaded;
	vector<int> *gentaus_id_;
	TBranch *gentaus_id_branch;
	bool gentaus_id_isLoaded;
	vector<int> *gentaus__genpsidx_;
	TBranch *gentaus__genpsidx_branch;
	bool gentaus__genpsidx_isLoaded;
	vector<int> *gentaus_status_;
	TBranch *gentaus_status_branch;
	bool gentaus_status_isLoaded;
	vector<vector<int> > *gentaus_lepdaughter_id_;
	TBranch *gentaus_lepdaughter_id_branch;
	bool gentaus_lepdaughter_id_isLoaded;
	vector<int> *gentaus_gentaudecay_;
	TBranch *gentaus_gentaudecay_branch;
	bool gentaus_gentaudecay_isLoaded;
	int	gen_nfromttaus__;
	TBranch *gen_nfromttaus__branch;
	bool gen_nfromttaus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gentaus_motherp4_;
	TBranch *gentaus_motherp4_branch;
	bool gentaus_motherp4_isLoaded;
	vector<float> *gentaus_mothercharge_;
	TBranch *gentaus_mothercharge_branch;
	bool gentaus_mothercharge_isLoaded;
	vector<int> *gentaus_motherid_;
	TBranch *gentaus_motherid_branch;
	bool gentaus_motherid_isLoaded;
	vector<int> *gentaus_motheridx_;
	TBranch *gentaus_motheridx_branch;
	bool gentaus_motheridx_isLoaded;
	vector<int> *gentaus_motherstatus_;
	TBranch *gentaus_motherstatus_branch;
	bool gentaus_motherstatus_isLoaded;
	vector<bool> *gennus_isfromt_;
	TBranch *gennus_isfromt_branch;
	bool gennus_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_p4_;
	TBranch *gennus_p4_branch;
	bool gennus_p4_isLoaded;
	vector<float> *gennus_charge_;
	TBranch *gennus_charge_branch;
	bool gennus_charge_isLoaded;
	vector<float> *gennus_iso_;
	TBranch *gennus_iso_branch;
	bool gennus_iso_isLoaded;
	vector<float> *gennus_mass_;
	TBranch *gennus_mass_branch;
	bool gennus_mass_isLoaded;
	vector<int> *gennus_id_;
	TBranch *gennus_id_branch;
	bool gennus_id_isLoaded;
	vector<int> *gennus__genpsidx_;
	TBranch *gennus__genpsidx_branch;
	bool gennus__genpsidx_isLoaded;
	vector<int> *gennus_status_;
	TBranch *gennus_status_branch;
	bool gennus_status_isLoaded;
	vector<vector<int> > *gennus_lepdaughter_id_;
	TBranch *gennus_lepdaughter_id_branch;
	bool gennus_lepdaughter_id_isLoaded;
	vector<int> *gennus_gentaudecay_;
	TBranch *gennus_gentaudecay_branch;
	bool gennus_gentaudecay_isLoaded;
	int	gen_nfromtnus__;
	TBranch *gen_nfromtnus__branch;
	bool gen_nfromtnus__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gennus_motherp4_;
	TBranch *gennus_motherp4_branch;
	bool gennus_motherp4_isLoaded;
	vector<float> *gennus_mothercharge_;
	TBranch *gennus_mothercharge_branch;
	bool gennus_mothercharge_isLoaded;
	vector<int> *gennus_motherid_;
	TBranch *gennus_motherid_branch;
	bool gennus_motherid_isLoaded;
	vector<int> *gennus_motheridx_;
	TBranch *gennus_motheridx_branch;
	bool gennus_motheridx_isLoaded;
	vector<int> *gennus_motherstatus_;
	TBranch *gennus_motherstatus_branch;
	bool gennus_motherstatus_isLoaded;
	vector<bool> *genbs_isfromt_;
	TBranch *genbs_isfromt_branch;
	bool genbs_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbs_p4_;
	TBranch *genbs_p4_branch;
	bool genbs_p4_isLoaded;
	vector<float> *genbs_charge_;
	TBranch *genbs_charge_branch;
	bool genbs_charge_isLoaded;
	vector<float> *genbs_iso_;
	TBranch *genbs_iso_branch;
	bool genbs_iso_isLoaded;
	vector<float> *genbs_mass_;
	TBranch *genbs_mass_branch;
	bool genbs_mass_isLoaded;
	vector<int> *genbs_id_;
	TBranch *genbs_id_branch;
	bool genbs_id_isLoaded;
	vector<int> *genbs__genpsidx_;
	TBranch *genbs__genpsidx_branch;
	bool genbs__genpsidx_isLoaded;
	vector<int> *genbs_status_;
	TBranch *genbs_status_branch;
	bool genbs_status_isLoaded;
	vector<vector<int> > *genbs_lepdaughter_id_;
	TBranch *genbs_lepdaughter_id_branch;
	bool genbs_lepdaughter_id_isLoaded;
	vector<int> *genbs_gentaudecay_;
	TBranch *genbs_gentaudecay_branch;
	bool genbs_gentaudecay_isLoaded;
	int	gen_nfromtbs__;
	TBranch *gen_nfromtbs__branch;
	bool gen_nfromtbs__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genbs_motherp4_;
	TBranch *genbs_motherp4_branch;
	bool genbs_motherp4_isLoaded;
	vector<float> *genbs_mothercharge_;
	TBranch *genbs_mothercharge_branch;
	bool genbs_mothercharge_isLoaded;
	vector<int> *genbs_motherid_;
	TBranch *genbs_motherid_branch;
	bool genbs_motherid_isLoaded;
	vector<int> *genbs_motheridx_;
	TBranch *genbs_motheridx_branch;
	bool genbs_motheridx_isLoaded;
	vector<int> *genbs_motherstatus_;
	TBranch *genbs_motherstatus_branch;
	bool genbs_motherstatus_isLoaded;
	vector<bool> *gents_isfromt_;
	TBranch *gents_isfromt_branch;
	bool gents_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gents_p4_;
	TBranch *gents_p4_branch;
	bool gents_p4_isLoaded;
	vector<float> *gents_charge_;
	TBranch *gents_charge_branch;
	bool gents_charge_isLoaded;
	vector<float> *gents_iso_;
	TBranch *gents_iso_branch;
	bool gents_iso_isLoaded;
	vector<float> *gents_mass_;
	TBranch *gents_mass_branch;
	bool gents_mass_isLoaded;
	vector<int> *gents_id_;
	TBranch *gents_id_branch;
	bool gents_id_isLoaded;
	vector<int> *gents__genpsidx_;
	TBranch *gents__genpsidx_branch;
	bool gents__genpsidx_isLoaded;
	vector<int> *gents_status_;
	TBranch *gents_status_branch;
	bool gents_status_isLoaded;
	vector<vector<int> > *gents_lepdaughter_id_;
	TBranch *gents_lepdaughter_id_branch;
	bool gents_lepdaughter_id_isLoaded;
	vector<int> *gents_gentaudecay_;
	TBranch *gents_gentaudecay_branch;
	bool gents_gentaudecay_isLoaded;
	int	gen_nfromtts__;
	TBranch *gen_nfromtts__branch;
	bool gen_nfromtts__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *gents_motherp4_;
	TBranch *gents_motherp4_branch;
	bool gents_motherp4_isLoaded;
	vector<float> *gents_mothercharge_;
	TBranch *gents_mothercharge_branch;
	bool gents_mothercharge_isLoaded;
	vector<int> *gents_motherid_;
	TBranch *gents_motherid_branch;
	bool gents_motherid_isLoaded;
	vector<int> *gents_motheridx_;
	TBranch *gents_motheridx_branch;
	bool gents_motheridx_isLoaded;
	vector<int> *gents_motherstatus_;
	TBranch *gents_motherstatus_branch;
	bool gents_motherstatus_isLoaded;
	vector<bool> *genqs_isfromt_;
	TBranch *genqs_isfromt_branch;
	bool genqs_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_p4_;
	TBranch *genqs_p4_branch;
	bool genqs_p4_isLoaded;
	vector<float> *genqs_charge_;
	TBranch *genqs_charge_branch;
	bool genqs_charge_isLoaded;
	vector<float> *genqs_iso_;
	TBranch *genqs_iso_branch;
	bool genqs_iso_isLoaded;
	vector<float> *genqs_mass_;
	TBranch *genqs_mass_branch;
	bool genqs_mass_isLoaded;
	vector<int> *genqs_id_;
	TBranch *genqs_id_branch;
	bool genqs_id_isLoaded;
	vector<int> *genqs__genpsidx_;
	TBranch *genqs__genpsidx_branch;
	bool genqs__genpsidx_isLoaded;
	vector<int> *genqs_status_;
	TBranch *genqs_status_branch;
	bool genqs_status_isLoaded;
	vector<vector<int> > *genqs_lepdaughter_id_;
	TBranch *genqs_lepdaughter_id_branch;
	bool genqs_lepdaughter_id_isLoaded;
	vector<int> *genqs_gentaudecay_;
	TBranch *genqs_gentaudecay_branch;
	bool genqs_gentaudecay_isLoaded;
	int	gen_nfromtqs__;
	TBranch *gen_nfromtqs__branch;
	bool gen_nfromtqs__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genqs_motherp4_;
	TBranch *genqs_motherp4_branch;
	bool genqs_motherp4_isLoaded;
	vector<float> *genqs_mothercharge_;
	TBranch *genqs_mothercharge_branch;
	bool genqs_mothercharge_isLoaded;
	vector<int> *genqs_motherid_;
	TBranch *genqs_motherid_branch;
	bool genqs_motherid_isLoaded;
	vector<int> *genqs_motheridx_;
	TBranch *genqs_motheridx_branch;
	bool genqs_motheridx_isLoaded;
	vector<int> *genqs_motherstatus_;
	TBranch *genqs_motherstatus_branch;
	bool genqs_motherstatus_isLoaded;
	vector<bool> *genlsp_isfromt_;
	TBranch *genlsp_isfromt_branch;
	bool genlsp_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genlsp_p4_;
	TBranch *genlsp_p4_branch;
	bool genlsp_p4_isLoaded;
	vector<float> *genlsp_charge_;
	TBranch *genlsp_charge_branch;
	bool genlsp_charge_isLoaded;
	vector<float> *genlsp_iso_;
	TBranch *genlsp_iso_branch;
	bool genlsp_iso_isLoaded;
	vector<float> *genlsp_mass_;
	TBranch *genlsp_mass_branch;
	bool genlsp_mass_isLoaded;
	vector<int> *genlsp_id_;
	TBranch *genlsp_id_branch;
	bool genlsp_id_isLoaded;
	vector<int> *genlsp__genpsidx_;
	TBranch *genlsp__genpsidx_branch;
	bool genlsp__genpsidx_isLoaded;
	vector<int> *genlsp_status_;
	TBranch *genlsp_status_branch;
	bool genlsp_status_isLoaded;
	vector<vector<int> > *genlsp_lepdaughter_id_;
	TBranch *genlsp_lepdaughter_id_branch;
	bool genlsp_lepdaughter_id_isLoaded;
	vector<int> *genlsp_gentaudecay_;
	TBranch *genlsp_gentaudecay_branch;
	bool genlsp_gentaudecay_isLoaded;
	int	gen_nfromtlsp__;
	TBranch *gen_nfromtlsp__branch;
	bool gen_nfromtlsp__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genlsp_motherp4_;
	TBranch *genlsp_motherp4_branch;
	bool genlsp_motherp4_isLoaded;
	vector<float> *genlsp_mothercharge_;
	TBranch *genlsp_mothercharge_branch;
	bool genlsp_mothercharge_isLoaded;
	vector<int> *genlsp_motherid_;
	TBranch *genlsp_motherid_branch;
	bool genlsp_motherid_isLoaded;
	vector<int> *genlsp_motheridx_;
	TBranch *genlsp_motheridx_branch;
	bool genlsp_motheridx_isLoaded;
	vector<int> *genlsp_motherstatus_;
	TBranch *genlsp_motherstatus_branch;
	bool genlsp_motherstatus_isLoaded;
	vector<bool> *genstop_isfromt_;
	TBranch *genstop_isfromt_branch;
	bool genstop_isfromt_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genstop_p4_;
	TBranch *genstop_p4_branch;
	bool genstop_p4_isLoaded;
	vector<float> *genstop_charge_;
	TBranch *genstop_charge_branch;
	bool genstop_charge_isLoaded;
	vector<float> *genstop_iso_;
	TBranch *genstop_iso_branch;
	bool genstop_iso_isLoaded;
	vector<float> *genstop_mass_;
	TBranch *genstop_mass_branch;
	bool genstop_mass_isLoaded;
	vector<int> *genstop_id_;
	TBranch *genstop_id_branch;
	bool genstop_id_isLoaded;
	vector<int> *genstop__genpsidx_;
	TBranch *genstop__genpsidx_branch;
	bool genstop__genpsidx_isLoaded;
	vector<int> *genstop_status_;
	TBranch *genstop_status_branch;
	bool genstop_status_isLoaded;
	vector<vector<int> > *genstop_lepdaughter_id_;
	TBranch *genstop_lepdaughter_id_branch;
	bool genstop_lepdaughter_id_isLoaded;
	vector<int> *genstop_gentaudecay_;
	TBranch *genstop_gentaudecay_branch;
	bool genstop_gentaudecay_isLoaded;
	int	gen_nfromtstop__;
	TBranch *gen_nfromtstop__branch;
	bool gen_nfromtstop__isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genstop_motherp4_;
	TBranch *genstop_motherp4_branch;
	bool genstop_motherp4_isLoaded;
	vector<float> *genstop_mothercharge_;
	TBranch *genstop_mothercharge_branch;
	bool genstop_mothercharge_isLoaded;
	vector<int> *genstop_motherid_;
	TBranch *genstop_motherid_branch;
	bool genstop_motherid_isLoaded;
	vector<int> *genstop_motheridx_;
	TBranch *genstop_motheridx_branch;
	bool genstop_motheridx_isLoaded;
	vector<int> *genstop_motherstatus_;
	TBranch *genstop_motherstatus_branch;
	bool genstop_motherstatus_isLoaded;
	vector<TString> *tau_IDnames_;
	TBranch *tau_IDnames_branch;
	bool tau_IDnames_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_leadtrack_p4_;
	TBranch *tau_leadtrack_p4_branch;
	bool tau_leadtrack_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_leadneutral_p4_;
	TBranch *tau_leadneutral_p4_branch;
	bool tau_leadneutral_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *tau_p4_;
	TBranch *tau_p4_branch;
	bool tau_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > *tau_isocand_p4_;
	TBranch *tau_isocand_p4_branch;
	bool tau_isocand_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > *tau_sigcand_p4_;
	TBranch *tau_sigcand_p4_branch;
	bool tau_sigcand_p4_isLoaded;
	vector<float> *tau_mass_;
	TBranch *tau_mass_branch;
	bool tau_mass_isLoaded;
	vector<vector<float> > *tau_ID_;
	TBranch *tau_ID_branch;
	bool tau_ID_isLoaded;
	vector<float> *tau_charge_;
	TBranch *tau_charge_branch;
	bool tau_charge_isLoaded;
	int	ngoodtaus_;
	TBranch *ngoodtaus_branch;
	bool ngoodtaus_isLoaded;
	vector<float> *tau_againstMuonTight_;
	TBranch *tau_againstMuonTight_branch;
	bool tau_againstMuonTight_isLoaded;
	vector<float> *tau_againstElectronLoose_;
	TBranch *tau_againstElectronLoose_branch;
	bool tau_againstElectronLoose_isLoaded;
	vector<bool> *tau_isVetoTau_;
	TBranch *tau_isVetoTau_branch;
	bool tau_isVetoTau_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *isoTracks_p4_;
	TBranch *isoTracks_p4_branch;
	bool isoTracks_p4_isLoaded;
	vector<int> *isoTracks_charge_;
	TBranch *isoTracks_charge_branch;
	bool isoTracks_charge_isLoaded;
	vector<float> *isoTracks_absIso_;
	TBranch *isoTracks_absIso_branch;
	bool isoTracks_absIso_isLoaded;
	vector<float> *isoTracks_dz_;
	TBranch *isoTracks_dz_branch;
	bool isoTracks_dz_isLoaded;
	vector<int> *isoTracks_pdgId_;
	TBranch *isoTracks_pdgId_branch;
	bool isoTracks_pdgId_isLoaded;
	vector<int> *isoTracks_selectedidx_;
	TBranch *isoTracks_selectedidx_branch;
	bool isoTracks_selectedidx_isLoaded;
	int	isoTracks_nselected_;
	TBranch *isoTracks_nselected_branch;
	bool isoTracks_nselected_isLoaded;
	vector<bool> *isoTracks_isVetoTrack_;
	TBranch *isoTracks_isVetoTrack_branch;
	bool isoTracks_isVetoTrack_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &firstGoodVtxIdx();
	const int &firstVtx_isfake();
	const float &firstVtx_ndof();
	const float &firstVtx_posRho();
	const float &firstVtx_posZ();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &firstVtx_posp4();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &scale1fb();
	const float &xsec();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nvetoleps();
	const bool &	is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &genlepsfromtop();
	const float &MT2W();
	const float &MT2W_lep2();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &mt_met_lep2();
	const float &dR_lep_leadb();
	const float &dR_lep2_leadb();
	const float &hadronic_top_chi2();
	const float &dphi_Wlep();
	const float &MET_over_sqrtHT();
	const float &ak4pfjets_rho();
	const vector<string> &sparms_comment();
	const vector<string> &sparms_names();
	const float &sparms_filterEfficiency();
	const float &sparms_pdfScale();
	const float &sparms_pdfWeight1();
	const float &sparms_pdfWeight2();
	const float &sparms_weight();
	const float &sparms_xsec();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &genmet();
	const float &genmet_phi();
	const bool &	PassTrackVeto();
	const bool &	PassTauVeto();
	const float &EA_all_rho();
	const float &EA_allcalo_rho();
	const float &EA_centralcalo_rho();
	const float &EA_centralchargedpileup_rho();
	const float &EA_centralneutral_rho();
	const float &topness();
	const float &topness_lep2();
	const float &topnessMod();
	const float &topnessMod_lep2();
	const float &MT2_lb_b();
	const float &MT2_lb_b_lep2();
	const float &MT2_lb_b_mass();
	const float &MT2_lb_b_mass_lep2();
	const float &MT2_lb_bqq();
	const float &MT2_lb_bqq_lep2();
	const float &MT2_lb_bqq_mass();
	const float &MT2_lb_bqq_mass_lep2();
	const float &Mlb_closestb();
	const float &Mlb_lead_bdiscr();
	const float &Mlb_closestb_lep2();
	const float &Mlb_lead_bdiscr_lep2();
	const float &Mjjj();
	const float &Mjjj_lep2();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET170();
	const int &HLT_ht350met120();
	const int &HLT_MET120Btag();
	const int &HLT_MET120Mu5();
	const float &pu_weight();
	const float &lep_sf();
	const float &btag_sf();
	const float &HLT_SingleEl_eff();
	const float &HLT_SingleMu_eff();
	const bool &	lep1_is_mu();
	const bool &	lep1_is_el();
	const int &lep1_charge();
	const int &lep1_pdgid();
	const int &lep1_type();
	const int &lep1_production_type();
	const float &lep1_d0();
	const float &lep1_d0err();
	const float &lep1_dz();
	const float &lep1_dzerr();
	const float &lep1_sigmaIEtaEta_fill5x5();
	const float &lep1_dEtaIn();
	const float &lep1_dPhiIn();
	const float &lep1_hOverE();
	const float &lep1_ooEmooP();
	const int &lep1_expectedMissingInnerHits();
	const bool &	lep1_conversionVeto();
	const float &lep1_etaSC();
	const float &lep1_ChiSqr();
	const float &lep1_chiso();
	const float &lep1_nhiso();
	const float &lep1_emiso();
	const float &lep1_deltaBeta();
	const float &lep1_relIso03DB();
	const float &lep1_relIso03EA();
	const float &lep1_relIso04DB();
	const float &lep1_miniRelIsoDB();
	const float &lep1_miniRelIsoEA();
	const float &lep1_MiniIso();
	const int &lep1_mcid();
	const int &lep1_mcstatus();
	const int &lep1_mc3dr();
	const int &lep1_mc3id();
	const int &lep1_mc3idx();
	const int &lep1_mc3motherid();
	const int &lep1_mc3motheridx();
	const bool &	lep1_is_eleid_loose();
	const bool &	lep1_is_eleid_medium();
	const bool &	lep1_is_eleid_tight();
	const bool &	lep1_is_phys14_loose_noIso();
	const bool &	lep1_is_phys14_medium_noIso();
	const bool &	lep1_is_phys14_tight_noIso();
	const float &lep1_eoverpin();
	const bool &	lep1_is_muoid_loose();
	const bool &	lep1_is_muoid_medium();
	const bool &	lep1_is_muoid_tight();
	const float &lep1_ip3d();
	const float &lep1_ip3derr();
	const bool &	lep1_is_pfmu();
	const bool &	lep1_passMediumID();
	const bool &	lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const float &lep1_pt();
	const float &lep1_eta();
	const float &lep1_phi();
	const float &lep1_mass();
	const bool &	lep2_is_mu();
	const bool &	lep2_is_el();
	const int &lep2_charge();
	const int &lep2_pdgid();
	const int &lep2_type();
	const int &lep2_production_type();
	const float &lep2_d0();
	const float &lep2_d0err();
	const float &lep2_dz();
	const float &lep2_dzerr();
	const float &lep2_sigmaIEtaEta_fill5x5();
	const float &lep2_dEtaIn();
	const float &lep2_dPhiIn();
	const float &lep2_hOverE();
	const float &lep2_ooEmooP();
	const int &lep2_expectedMissingInnerHits();
	const bool &	lep2_conversionVeto();
	const float &lep2_etaSC();
	const float &lep2_ChiSqr();
	const float &lep2_chiso();
	const float &lep2_nhiso();
	const float &lep2_emiso();
	const float &lep2_deltaBeta();
	const float &lep2_relIso03DB();
	const float &lep2_relIso03EA();
	const float &lep2_relIso04DB();
	const float &lep2_miniRelIsoDB();
	const float &lep2_miniRelIsoEA();
	const float &lep2_MiniIso();
	const int &lep2_mcid();
	const int &lep2_mcstatus();
	const int &lep2_mc3dr();
	const int &lep2_mc3id();
	const int &lep2_mc3idx();
	const int &lep2_mc3motherid();
	const int &lep2_mc3motheridx();
	const bool &	lep2_is_eleid_loose();
	const bool &	lep2_is_eleid_medium();
	const bool &	lep2_is_eleid_tight();
	const bool &	lep2_is_phys14_loose_noIso();
	const bool &	lep2_is_phys14_medium_noIso();
	const bool &	lep2_is_phys14_tight_noIso();
	const float &lep2_eoverpin();
	const bool &	lep2_is_muoid_loose();
	const bool &	lep2_is_muoid_medium();
	const bool &	lep2_is_muoid_tight();
	const float &lep2_ip3d();
	const float &lep2_ip3derr();
	const bool &	lep2_is_pfmu();
	const bool &	lep2_passMediumID();
	const bool &	lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const float &lep2_pt();
	const float &lep2_eta();
	const float &lep2_phi();
	const float &lep2_mass();
	const int &nGoodGenJets();
	const int &ngoodjets();
	const int &nfailjets();
	const int &ak8GoodPFJets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htssm();
	const float &ak4_htosm();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<float> &ak4pfjets_pt();
	const vector<float> &ak4pfjets_eta();
	const vector<float> &ak4pfjets_phi();
	const vector<float> &ak4pfjets_mass();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_qg_disc();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_puid();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const vector<bool> &ak4pfjets_medium_pfid();
	const vector<bool> &ak4pfjets_tight_pfid();
	const vector<float> &ak4pfjets_MEDbjet_pt();
	const float &ak4pfjets_leadMEDbjet_pt();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<float> &ak4pfjets_chf();
	const vector<float> &ak4pfjets_nhf();
	const vector<float> &ak4pfjets_cef();
	const vector<float> &ak4pfjets_nef();
	const vector<float> &ak4pfjets_muf();
	const vector<int> &ak4pfjets_cm();
	const vector<int> &ak4pfjets_nm();
	const vector<int> &ak4pfjets_mc3dr();
	const vector<int> &ak4pfjets_mc3id();
	const vector<int> &ak4pfjets_mc3idx();
	const vector<int> &ak4pfjets_mcmotherid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep1_p4();
	const float &ak4pfjet_overlep1_CSV();
	const float &ak4pfjet_overlep1_pu_id();
	const float &ak4pfjet_overlep1_chf();
	const float &ak4pfjet_overlep1_nhf();
	const float &ak4pfjet_overlep1_cef();
	const float &ak4pfjet_overlep1_nef();
	const float &ak4pfjet_overlep1_muf();
	const int &ak4pfjet_overlep1_cm();
	const int &ak4pfjet_overlep1_nm();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep2_p4();
	const float &ak4pfjet_overlep2_CSV();
	const float &ak4pfjet_overlep2_pu_id();
	const float &ak4pfjet_overlep2_chf();
	const float &ak4pfjet_overlep2_nhf();
	const float &ak4pfjet_overlep2_cef();
	const float &ak4pfjet_overlep2_nef();
	const float &ak4pfjet_overlep2_muf();
	const int &ak4pfjet_overlep2_cm();
	const int &ak4pfjet_overlep2_nm();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8pfjets_p4();
	const vector<float> &ak8pfjets_tau1();
	const vector<float> &ak8pfjets_tau2();
	const vector<float> &ak8pfjets_tau3();
	const vector<float> &ak8pfjets_top_mass();
	const vector<float> &ak8pfjets_pruned_mass();
	const vector<float> &ak8pfjets_trimmed_mass();
	const vector<float> &ak8pfjets_filtered_mass();
	const vector<float> &ak8pfjets_pu_id();
	const vector<int> &ak8pfjets_parton_flavor();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<bool> &genels_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genels_p4();
	const vector<float> &genels_charge();
	const vector<float> &genels_iso();
	const vector<float> &genels_mass();
	const vector<int> &genels_id();
	const vector<int> &genels__genpsidx();
	const vector<int> &genels_status();
	const vector<vector<int> > &genels_lepdaughter_id();
	const vector<int> &genels_gentaudecay();
	const int &gen_nfromtels_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genels_motherp4();
	const vector<float> &genels_mothercharge();
	const vector<int> &genels_motherid();
	const vector<int> &genels_motheridx();
	const vector<int> &genels_motherstatus();
	const vector<bool> &genmus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genmus_p4();
	const vector<float> &genmus_charge();
	const vector<float> &genmus_iso();
	const vector<float> &genmus_mass();
	const vector<int> &genmus_id();
	const vector<int> &genmus__genpsidx();
	const vector<int> &genmus_status();
	const vector<vector<int> > &genmus_lepdaughter_id();
	const vector<int> &genmus_gentaudecay();
	const int &gen_nfromtmus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genmus_motherp4();
	const vector<float> &genmus_mothercharge();
	const vector<int> &genmus_motherid();
	const vector<int> &genmus_motheridx();
	const vector<int> &genmus_motherstatus();
	const vector<bool> &genleptau_els_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_els_p4();
	const vector<float> &genleptau_els_charge();
	const vector<float> &genleptau_els_iso();
	const vector<float> &genleptau_els_mass();
	const vector<int> &genleptau_els_id();
	const vector<int> &genleptau_els__genpsidx();
	const vector<int> &genleptau_els_status();
	const vector<vector<int> > &genleptau_els_lepdaughter_id();
	const vector<int> &genleptau_els_gentaudecay();
	const int &gen_nfromtleptau_els_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_els_motherp4();
	const vector<float> &genleptau_els_mothercharge();
	const vector<int> &genleptau_els_motherid();
	const vector<int> &genleptau_els_motheridx();
	const vector<int> &genleptau_els_motherstatus();
	const vector<bool> &genleptau_mus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_mus_p4();
	const vector<float> &genleptau_mus_charge();
	const vector<float> &genleptau_mus_iso();
	const vector<float> &genleptau_mus_mass();
	const vector<int> &genleptau_mus_id();
	const vector<int> &genleptau_mus__genpsidx();
	const vector<int> &genleptau_mus_status();
	const vector<vector<int> > &genleptau_mus_lepdaughter_id();
	const vector<int> &genleptau_mus_gentaudecay();
	const int &gen_nfromtleptau_mus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_mus_motherp4();
	const vector<float> &genleptau_mus_mothercharge();
	const vector<int> &genleptau_mus_motherid();
	const vector<int> &genleptau_mus_motheridx();
	const vector<int> &genleptau_mus_motherstatus();
	const vector<bool> &gentaus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gentaus_p4();
	const vector<float> &gentaus_charge();
	const vector<float> &gentaus_iso();
	const vector<float> &gentaus_mass();
	const vector<int> &gentaus_id();
	const vector<int> &gentaus__genpsidx();
	const vector<int> &gentaus_status();
	const vector<vector<int> > &gentaus_lepdaughter_id();
	const vector<int> &gentaus_gentaudecay();
	const int &gen_nfromttaus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gentaus_motherp4();
	const vector<float> &gentaus_mothercharge();
	const vector<int> &gentaus_motherid();
	const vector<int> &gentaus_motheridx();
	const vector<int> &gentaus_motherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<float> &gennus_charge();
	const vector<float> &gennus_iso();
	const vector<float> &gennus_mass();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<vector<int> > &gennus_lepdaughter_id();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<float> &gennus_mothercharge();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<bool> &genbs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbs_p4();
	const vector<float> &genbs_charge();
	const vector<float> &genbs_iso();
	const vector<float> &genbs_mass();
	const vector<int> &genbs_id();
	const vector<int> &genbs__genpsidx();
	const vector<int> &genbs_status();
	const vector<vector<int> > &genbs_lepdaughter_id();
	const vector<int> &genbs_gentaudecay();
	const int &gen_nfromtbs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbs_motherp4();
	const vector<float> &genbs_mothercharge();
	const vector<int> &genbs_motherid();
	const vector<int> &genbs_motheridx();
	const vector<int> &genbs_motherstatus();
	const vector<bool> &gents_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_p4();
	const vector<float> &gents_charge();
	const vector<float> &gents_iso();
	const vector<float> &gents_mass();
	const vector<int> &gents_id();
	const vector<int> &gents__genpsidx();
	const vector<int> &gents_status();
	const vector<vector<int> > &gents_lepdaughter_id();
	const vector<int> &gents_gentaudecay();
	const int &gen_nfromtts_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_motherp4();
	const vector<float> &gents_mothercharge();
	const vector<int> &gents_motherid();
	const vector<int> &gents_motheridx();
	const vector<int> &gents_motherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<float> &genqs_charge();
	const vector<float> &genqs_iso();
	const vector<float> &genqs_mass();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<vector<int> > &genqs_lepdaughter_id();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<float> &genqs_mothercharge();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<bool> &genlsp_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genlsp_p4();
	const vector<float> &genlsp_charge();
	const vector<float> &genlsp_iso();
	const vector<float> &genlsp_mass();
	const vector<int> &genlsp_id();
	const vector<int> &genlsp__genpsidx();
	const vector<int> &genlsp_status();
	const vector<vector<int> > &genlsp_lepdaughter_id();
	const vector<int> &genlsp_gentaudecay();
	const int &gen_nfromtlsp_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genlsp_motherp4();
	const vector<float> &genlsp_mothercharge();
	const vector<int> &genlsp_motherid();
	const vector<int> &genlsp_motheridx();
	const vector<int> &genlsp_motherstatus();
	const vector<bool> &genstop_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genstop_p4();
	const vector<float> &genstop_charge();
	const vector<float> &genstop_iso();
	const vector<float> &genstop_mass();
	const vector<int> &genstop_id();
	const vector<int> &genstop__genpsidx();
	const vector<int> &genstop_status();
	const vector<vector<int> > &genstop_lepdaughter_id();
	const vector<int> &genstop_gentaudecay();
	const int &gen_nfromtstop_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genstop_motherp4();
	const vector<float> &genstop_mothercharge();
	const vector<int> &genstop_motherid();
	const vector<int> &genstop_motheridx();
	const vector<int> &genstop_motherstatus();
	const vector<TString> &tau_IDnames();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadtrack_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadneutral_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_isocand_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_sigcand_p4();
	const vector<float> &tau_mass();
	const vector<vector<float> > &tau_ID();
	const vector<float> &tau_charge();
	const int &ngoodtaus();
	const vector<float> &tau_againstMuonTight();
	const vector<float> &tau_againstElectronLoose();
	const vector<bool> &tau_isVetoTau();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isoTracks_p4();
	const vector<int> &isoTracks_charge();
	const vector<float> &isoTracks_absIso();
	const vector<float> &isoTracks_dz();
	const vector<int> &isoTracks_pdgId();
	const vector<int> &isoTracks_selectedidx();
	const int &isoTracks_nselected();
	const vector<bool> &isoTracks_isVetoTrack();

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern CMS3 cms3;
#endif

namespace tas {
	const unsigned int &run();
	const unsigned int &ls();
	const unsigned int &evt();
	const int &nvtxs();
	const int &firstGoodVtxIdx();
	const int &firstVtx_isfake();
	const float &firstVtx_ndof();
	const float &firstVtx_posRho();
	const float &firstVtx_posZ();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &firstVtx_posp4();
	const int &pu_nvtxs();
	const float &pfmet();
	const float &pfmet_phi();
	const float &scale1fb();
	const float &xsec();
	const float &kfactor();
	const float &pu_ntrue();
	const int &ngoodleps();
	const int &nvetoleps();
	const bool &is_data();
	const string &dataset();
	const string &filename();
	const string &cms3tag();
	const unsigned int &nEvents();
	const unsigned int &nEvents_goodvtx();
	const unsigned int &nEvents_MET30();
	const unsigned int &nEvents_1goodlep();
	const unsigned int &nEvents_2goodjets();
	const int &genlepsfromtop();
	const float &MT2W();
	const float &MT2W_lep2();
	const float &mindphi_met_j1_j2();
	const float &mt_met_lep();
	const float &mt_met_lep2();
	const float &dR_lep_leadb();
	const float &dR_lep2_leadb();
	const float &hadronic_top_chi2();
	const float &dphi_Wlep();
	const float &MET_over_sqrtHT();
	const float &ak4pfjets_rho();
	const vector<string> &sparms_comment();
	const vector<string> &sparms_names();
	const float &sparms_filterEfficiency();
	const float &sparms_pdfScale();
	const float &sparms_pdfWeight1();
	const float &sparms_pdfWeight2();
	const float &sparms_weight();
	const float &sparms_xsec();
	const vector<float> &sparms_values();
	const int &sparms_subProcessId();
	const float &mass_lsp();
	const float &mass_chargino();
	const float &mass_stop();
	const float &genmet();
	const float &genmet_phi();
	const bool &PassTrackVeto();
	const bool &PassTauVeto();
	const float &EA_all_rho();
	const float &EA_allcalo_rho();
	const float &EA_centralcalo_rho();
	const float &EA_centralchargedpileup_rho();
	const float &EA_centralneutral_rho();
	const float &topness();
	const float &topness_lep2();
	const float &topnessMod();
	const float &topnessMod_lep2();
	const float &MT2_lb_b();
	const float &MT2_lb_b_lep2();
	const float &MT2_lb_b_mass();
	const float &MT2_lb_b_mass_lep2();
	const float &MT2_lb_bqq();
	const float &MT2_lb_bqq_lep2();
	const float &MT2_lb_bqq_mass();
	const float &MT2_lb_bqq_mass_lep2();
	const float &Mlb_closestb();
	const float &Mlb_lead_bdiscr();
	const float &Mlb_closestb_lep2();
	const float &Mlb_lead_bdiscr_lep2();
	const float &Mjjj();
	const float &Mjjj_lep2();
	const int &HLT_SingleEl();
	const int &HLT_SingleMu();
	const int &HLT_MET170();
	const int &HLT_ht350met120();
	const int &HLT_MET120Btag();
	const int &HLT_MET120Mu5();
	const float &pu_weight();
	const float &lep_sf();
	const float &btag_sf();
	const float &HLT_SingleEl_eff();
	const float &HLT_SingleMu_eff();
	const bool &lep1_is_mu();
	const bool &lep1_is_el();
	const int &lep1_charge();
	const int &lep1_pdgid();
	const int &lep1_type();
	const int &lep1_production_type();
	const float &lep1_d0();
	const float &lep1_d0err();
	const float &lep1_dz();
	const float &lep1_dzerr();
	const float &lep1_sigmaIEtaEta_fill5x5();
	const float &lep1_dEtaIn();
	const float &lep1_dPhiIn();
	const float &lep1_hOverE();
	const float &lep1_ooEmooP();
	const int &lep1_expectedMissingInnerHits();
	const bool &lep1_conversionVeto();
	const float &lep1_etaSC();
	const float &lep1_ChiSqr();
	const float &lep1_chiso();
	const float &lep1_nhiso();
	const float &lep1_emiso();
	const float &lep1_deltaBeta();
	const float &lep1_relIso03DB();
	const float &lep1_relIso03EA();
	const float &lep1_relIso04DB();
	const float &lep1_miniRelIsoDB();
	const float &lep1_miniRelIsoEA();
	const float &lep1_MiniIso();
	const int &lep1_mcid();
	const int &lep1_mcstatus();
	const int &lep1_mc3dr();
	const int &lep1_mc3id();
	const int &lep1_mc3idx();
	const int &lep1_mc3motherid();
	const int &lep1_mc3motheridx();
	const bool &lep1_is_eleid_loose();
	const bool &lep1_is_eleid_medium();
	const bool &lep1_is_eleid_tight();
	const bool &lep1_is_phys14_loose_noIso();
	const bool &lep1_is_phys14_medium_noIso();
	const bool &lep1_is_phys14_tight_noIso();
	const float &lep1_eoverpin();
	const bool &lep1_is_muoid_loose();
	const bool &lep1_is_muoid_medium();
	const bool &lep1_is_muoid_tight();
	const float &lep1_ip3d();
	const float &lep1_ip3derr();
	const bool &lep1_is_pfmu();
	const bool &lep1_passMediumID();
	const bool &lep1_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_mcp4();
	const float &lep1_pt();
	const float &lep1_eta();
	const float &lep1_phi();
	const float &lep1_mass();
	const bool &lep2_is_mu();
	const bool &lep2_is_el();
	const int &lep2_charge();
	const int &lep2_pdgid();
	const int &lep2_type();
	const int &lep2_production_type();
	const float &lep2_d0();
	const float &lep2_d0err();
	const float &lep2_dz();
	const float &lep2_dzerr();
	const float &lep2_sigmaIEtaEta_fill5x5();
	const float &lep2_dEtaIn();
	const float &lep2_dPhiIn();
	const float &lep2_hOverE();
	const float &lep2_ooEmooP();
	const int &lep2_expectedMissingInnerHits();
	const bool &lep2_conversionVeto();
	const float &lep2_etaSC();
	const float &lep2_ChiSqr();
	const float &lep2_chiso();
	const float &lep2_nhiso();
	const float &lep2_emiso();
	const float &lep2_deltaBeta();
	const float &lep2_relIso03DB();
	const float &lep2_relIso03EA();
	const float &lep2_relIso04DB();
	const float &lep2_miniRelIsoDB();
	const float &lep2_miniRelIsoEA();
	const float &lep2_MiniIso();
	const int &lep2_mcid();
	const int &lep2_mcstatus();
	const int &lep2_mc3dr();
	const int &lep2_mc3id();
	const int &lep2_mc3idx();
	const int &lep2_mc3motherid();
	const int &lep2_mc3motheridx();
	const bool &lep2_is_eleid_loose();
	const bool &lep2_is_eleid_medium();
	const bool &lep2_is_eleid_tight();
	const bool &lep2_is_phys14_loose_noIso();
	const bool &lep2_is_phys14_medium_noIso();
	const bool &lep2_is_phys14_tight_noIso();
	const float &lep2_eoverpin();
	const bool &lep2_is_muoid_loose();
	const bool &lep2_is_muoid_medium();
	const bool &lep2_is_muoid_tight();
	const float &lep2_ip3d();
	const float &lep2_ip3derr();
	const bool &lep2_is_pfmu();
	const bool &lep2_passMediumID();
	const bool &lep2_passVeto();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_mcp4();
	const float &lep2_pt();
	const float &lep2_eta();
	const float &lep2_phi();
	const float &lep2_mass();
	const int &nGoodGenJets();
	const int &ngoodjets();
	const int &nfailjets();
	const int &ak8GoodPFJets();
	const int &ngoodbtags();
	const float &ak4_HT();
	const float &ak4_htssm();
	const float &ak4_htosm();
	const float &ak4_htratiom();
	const vector<float> &dphi_ak4pfjet_met();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4pfjets_p4();
	const vector<float> &ak4pfjets_pt();
	const vector<float> &ak4pfjets_eta();
	const vector<float> &ak4pfjets_phi();
	const vector<float> &ak4pfjets_mass();
	const vector<bool> &ak4pfjets_passMEDbtag();
	const vector<float> &ak4pfjets_qg_disc();
	const vector<float> &ak4pfjets_CSV();
	const vector<float> &ak4pfjets_puid();
	const vector<int> &ak4pfjets_parton_flavor();
	const vector<bool> &ak4pfjets_loose_puid();
	const vector<bool> &ak4pfjets_loose_pfid();
	const vector<bool> &ak4pfjets_medium_pfid();
	const vector<bool> &ak4pfjets_tight_pfid();
	const vector<float> &ak4pfjets_MEDbjet_pt();
	const float &ak4pfjets_leadMEDbjet_pt();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadMEDbjet_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjets_leadbtag_p4();
	const vector<float> &ak4pfjets_chf();
	const vector<float> &ak4pfjets_nhf();
	const vector<float> &ak4pfjets_cef();
	const vector<float> &ak4pfjets_nef();
	const vector<float> &ak4pfjets_muf();
	const vector<int> &ak4pfjets_cm();
	const vector<int> &ak4pfjets_nm();
	const vector<int> &ak4pfjets_mc3dr();
	const vector<int> &ak4pfjets_mc3id();
	const vector<int> &ak4pfjets_mc3idx();
	const vector<int> &ak4pfjets_mcmotherid();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep1_p4();
	const float &ak4pfjet_overlep1_CSV();
	const float &ak4pfjet_overlep1_pu_id();
	const float &ak4pfjet_overlep1_chf();
	const float &ak4pfjet_overlep1_nhf();
	const float &ak4pfjet_overlep1_cef();
	const float &ak4pfjet_overlep1_nef();
	const float &ak4pfjet_overlep1_muf();
	const int &ak4pfjet_overlep1_cm();
	const int &ak4pfjet_overlep1_nm();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &ak4pfjet_overlep2_p4();
	const float &ak4pfjet_overlep2_CSV();
	const float &ak4pfjet_overlep2_pu_id();
	const float &ak4pfjet_overlep2_chf();
	const float &ak4pfjet_overlep2_nhf();
	const float &ak4pfjet_overlep2_cef();
	const float &ak4pfjet_overlep2_nef();
	const float &ak4pfjet_overlep2_muf();
	const int &ak4pfjet_overlep2_cm();
	const int &ak4pfjet_overlep2_nm();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8pfjets_p4();
	const vector<float> &ak8pfjets_tau1();
	const vector<float> &ak8pfjets_tau2();
	const vector<float> &ak8pfjets_tau3();
	const vector<float> &ak8pfjets_top_mass();
	const vector<float> &ak8pfjets_pruned_mass();
	const vector<float> &ak8pfjets_trimmed_mass();
	const vector<float> &ak8pfjets_filtered_mass();
	const vector<float> &ak8pfjets_pu_id();
	const vector<int> &ak8pfjets_parton_flavor();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak4genjets_p4();
	const vector<bool> &genels_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genels_p4();
	const vector<float> &genels_charge();
	const vector<float> &genels_iso();
	const vector<float> &genels_mass();
	const vector<int> &genels_id();
	const vector<int> &genels__genpsidx();
	const vector<int> &genels_status();
	const vector<vector<int> > &genels_lepdaughter_id();
	const vector<int> &genels_gentaudecay();
	const int &gen_nfromtels_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genels_motherp4();
	const vector<float> &genels_mothercharge();
	const vector<int> &genels_motherid();
	const vector<int> &genels_motheridx();
	const vector<int> &genels_motherstatus();
	const vector<bool> &genmus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genmus_p4();
	const vector<float> &genmus_charge();
	const vector<float> &genmus_iso();
	const vector<float> &genmus_mass();
	const vector<int> &genmus_id();
	const vector<int> &genmus__genpsidx();
	const vector<int> &genmus_status();
	const vector<vector<int> > &genmus_lepdaughter_id();
	const vector<int> &genmus_gentaudecay();
	const int &gen_nfromtmus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genmus_motherp4();
	const vector<float> &genmus_mothercharge();
	const vector<int> &genmus_motherid();
	const vector<int> &genmus_motheridx();
	const vector<int> &genmus_motherstatus();
	const vector<bool> &genleptau_els_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_els_p4();
	const vector<float> &genleptau_els_charge();
	const vector<float> &genleptau_els_iso();
	const vector<float> &genleptau_els_mass();
	const vector<int> &genleptau_els_id();
	const vector<int> &genleptau_els__genpsidx();
	const vector<int> &genleptau_els_status();
	const vector<vector<int> > &genleptau_els_lepdaughter_id();
	const vector<int> &genleptau_els_gentaudecay();
	const int &gen_nfromtleptau_els_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_els_motherp4();
	const vector<float> &genleptau_els_mothercharge();
	const vector<int> &genleptau_els_motherid();
	const vector<int> &genleptau_els_motheridx();
	const vector<int> &genleptau_els_motherstatus();
	const vector<bool> &genleptau_mus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_mus_p4();
	const vector<float> &genleptau_mus_charge();
	const vector<float> &genleptau_mus_iso();
	const vector<float> &genleptau_mus_mass();
	const vector<int> &genleptau_mus_id();
	const vector<int> &genleptau_mus__genpsidx();
	const vector<int> &genleptau_mus_status();
	const vector<vector<int> > &genleptau_mus_lepdaughter_id();
	const vector<int> &genleptau_mus_gentaudecay();
	const int &gen_nfromtleptau_mus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genleptau_mus_motherp4();
	const vector<float> &genleptau_mus_mothercharge();
	const vector<int> &genleptau_mus_motherid();
	const vector<int> &genleptau_mus_motheridx();
	const vector<int> &genleptau_mus_motherstatus();
	const vector<bool> &gentaus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gentaus_p4();
	const vector<float> &gentaus_charge();
	const vector<float> &gentaus_iso();
	const vector<float> &gentaus_mass();
	const vector<int> &gentaus_id();
	const vector<int> &gentaus__genpsidx();
	const vector<int> &gentaus_status();
	const vector<vector<int> > &gentaus_lepdaughter_id();
	const vector<int> &gentaus_gentaudecay();
	const int &gen_nfromttaus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gentaus_motherp4();
	const vector<float> &gentaus_mothercharge();
	const vector<int> &gentaus_motherid();
	const vector<int> &gentaus_motheridx();
	const vector<int> &gentaus_motherstatus();
	const vector<bool> &gennus_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_p4();
	const vector<float> &gennus_charge();
	const vector<float> &gennus_iso();
	const vector<float> &gennus_mass();
	const vector<int> &gennus_id();
	const vector<int> &gennus__genpsidx();
	const vector<int> &gennus_status();
	const vector<vector<int> > &gennus_lepdaughter_id();
	const vector<int> &gennus_gentaudecay();
	const int &gen_nfromtnus_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gennus_motherp4();
	const vector<float> &gennus_mothercharge();
	const vector<int> &gennus_motherid();
	const vector<int> &gennus_motheridx();
	const vector<int> &gennus_motherstatus();
	const vector<bool> &genbs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbs_p4();
	const vector<float> &genbs_charge();
	const vector<float> &genbs_iso();
	const vector<float> &genbs_mass();
	const vector<int> &genbs_id();
	const vector<int> &genbs__genpsidx();
	const vector<int> &genbs_status();
	const vector<vector<int> > &genbs_lepdaughter_id();
	const vector<int> &genbs_gentaudecay();
	const int &gen_nfromtbs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genbs_motherp4();
	const vector<float> &genbs_mothercharge();
	const vector<int> &genbs_motherid();
	const vector<int> &genbs_motheridx();
	const vector<int> &genbs_motherstatus();
	const vector<bool> &gents_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_p4();
	const vector<float> &gents_charge();
	const vector<float> &gents_iso();
	const vector<float> &gents_mass();
	const vector<int> &gents_id();
	const vector<int> &gents__genpsidx();
	const vector<int> &gents_status();
	const vector<vector<int> > &gents_lepdaughter_id();
	const vector<int> &gents_gentaudecay();
	const int &gen_nfromtts_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &gents_motherp4();
	const vector<float> &gents_mothercharge();
	const vector<int> &gents_motherid();
	const vector<int> &gents_motheridx();
	const vector<int> &gents_motherstatus();
	const vector<bool> &genqs_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_p4();
	const vector<float> &genqs_charge();
	const vector<float> &genqs_iso();
	const vector<float> &genqs_mass();
	const vector<int> &genqs_id();
	const vector<int> &genqs__genpsidx();
	const vector<int> &genqs_status();
	const vector<vector<int> > &genqs_lepdaughter_id();
	const vector<int> &genqs_gentaudecay();
	const int &gen_nfromtqs_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genqs_motherp4();
	const vector<float> &genqs_mothercharge();
	const vector<int> &genqs_motherid();
	const vector<int> &genqs_motheridx();
	const vector<int> &genqs_motherstatus();
	const vector<bool> &genlsp_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genlsp_p4();
	const vector<float> &genlsp_charge();
	const vector<float> &genlsp_iso();
	const vector<float> &genlsp_mass();
	const vector<int> &genlsp_id();
	const vector<int> &genlsp__genpsidx();
	const vector<int> &genlsp_status();
	const vector<vector<int> > &genlsp_lepdaughter_id();
	const vector<int> &genlsp_gentaudecay();
	const int &gen_nfromtlsp_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genlsp_motherp4();
	const vector<float> &genlsp_mothercharge();
	const vector<int> &genlsp_motherid();
	const vector<int> &genlsp_motheridx();
	const vector<int> &genlsp_motherstatus();
	const vector<bool> &genstop_isfromt();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genstop_p4();
	const vector<float> &genstop_charge();
	const vector<float> &genstop_iso();
	const vector<float> &genstop_mass();
	const vector<int> &genstop_id();
	const vector<int> &genstop__genpsidx();
	const vector<int> &genstop_status();
	const vector<vector<int> > &genstop_lepdaughter_id();
	const vector<int> &genstop_gentaudecay();
	const int &gen_nfromtstop_();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genstop_motherp4();
	const vector<float> &genstop_mothercharge();
	const vector<int> &genstop_motherid();
	const vector<int> &genstop_motheridx();
	const vector<int> &genstop_motherstatus();
	const vector<TString> &tau_IDnames();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadtrack_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_leadneutral_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &tau_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_isocand_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &tau_sigcand_p4();
	const vector<float> &tau_mass();
	const vector<vector<float> > &tau_ID();
	const vector<float> &tau_charge();
	const int &ngoodtaus();
	const vector<float> &tau_againstMuonTight();
	const vector<float> &tau_againstElectronLoose();
	const vector<bool> &tau_isVetoTau();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isoTracks_p4();
	const vector<int> &isoTracks_charge();
	const vector<float> &isoTracks_absIso();
	const vector<float> &isoTracks_dz();
	const vector<int> &isoTracks_pdgId();
	const vector<int> &isoTracks_selectedidx();
	const int &isoTracks_nselected();
	const vector<bool> &isoTracks_isVetoTrack();
}
#endif
